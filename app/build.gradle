apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "com.github.kt3k.coveralls"
apply plugin: 'jacoco'

jacoco {
    toolVersion = versions.jacoco_tool
}

android {
    compileSdkVersion sdk_versions.compile_sdk
    defaultConfig {
        applicationId "org.smartregister.fhircore"
        minSdkVersion sdk_versions.min_sdk
        targetSdkVersion sdk_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Required when setting minSdkVersion to 20 or lower
        // See https://developer.android.com/studio/write/java8-support
        multiDexEnabled true
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        // See https://developer.android.com/studio/write/java8-support
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        // See https://developer.android.com/studio/write/java8-support
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
    }
    // See https://developer.android.com/studio/write/java8-support
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/*'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
}

configurations {
    all {
        exclude module: 'json'
        exclude module: 'xpp3'
    }
}

dependencies {
    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.espresso

    coreLibraryDesugaring deps.desugar

    implementation('com.google.android.fhir:datacapture:0.0.4') {
        transitive = true
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
        exclude group: 'javax.xml.bind', module: 'jaxb-api'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
        exclude group: 'com.sun.activation', module: 'javax.activation'
    }
    implementation('com.google.android.fhir:engine:0.0.2') {
        transitive = true
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
        exclude group: 'javax.xml.bind', module: 'jaxb-api'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
        exclude group: 'com.sun.activation', module: 'javax.activation'
    }

    implementation (group: 'ca.uhn.hapi.fhir', name: 'org.hl7.fhir.r4', version: '5.3.0'){
        exclude group:'org.slf4j' ,module:'jcl-over-slf4j'
    }
    implementation( group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-base', version: '5.3.0'){
        exclude group:'org.slf4j' ,module:'jcl-over-slf4j'
    }
    implementation (group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-r4', version: '5.3.0'){
        exclude group:'org.slf4j' ,module:'jcl-over-slf4j'
    }

    implementation deps.appcompat
    implementation deps.constraint_layout
    implementation deps.coroutines.android
    implementation deps.coroutines.core
    implementation deps.kotlin.stdlib
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.livedata_ktx
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel
    implementation deps.material
    implementation deps.okhttp_logging_interceptor
    implementation deps.recyclerview
    implementation deps.retrofit.core
    implementation deps.retrofit.gson
    implementation deps.retrofit.mock
    implementation deps.work.runtime

    implementation deps.core
    implementation deps.fragment

    implementation(deps.cql_engine.fhir){
        transitive = false
    }
    implementation(deps.caffeine){
        transitive = false
    }
    implementation(deps.guava){
        transitive = false
    }
    implementation(deps.room.ktx){
        transitive = false
    }
    implementation(deps.room.runtime){
        transitive = false
    }
    implementation(deps.json_tools.json_patch){
        transitive = false
    }

    api(deps.cql_engine.core){
        transitive = false
    }
    api (deps.hapi_r4) {
        transitive = false
    }

    kapt deps.room.compiler

    testImplementation deps.junit
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android*/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}
