//Declare name and version of lib
library TestResults version '1'

//FHIR as a data model and version of FHIR
using FHIR version '4.0.1'

//functions to help FHIR vs CQL primitives
include "FHIRHelpers" version '4.0.1' called FHIRHelpers

//System declarations  : Codable concept codes systems
codesystem "SNOMED": 'http://snomed.info/sct'
codesystem "ConditionClinicalStatusCodes": 'http://terminology.hl7.org/CodeSystem/condition-clinical'
codesystem "ConditionVerificationStatusCodes": 'http://hl7.org/fhir/ValueSet/condition-ver-status'
codesystem "ServiceReqCategoryCodes": 'http://hl7.org/fhir/ValueSet/servicerequest-category'
codesystem "DiagReportCategoryCodes": 'http://hl7.org/fhir/ValueSet/diagnostic-service-sections'

//Code used as identifers
code "Pregnancy code": '77386006' from "SNOMED" display 'Pregnant'
code "G6PD code": '86859003' from "SNOMED" display 'G6PD Enzyme'
code "Haemoglobin code": '259695003' from "SNOMED" display 'Haemoglobin'

code "active": 'active' from "ConditionClinicalStatusCodes"
code "confirmed": 'confirmed' from "ConditionVerificationStatusCodes"
code "g6pdStatusCode": '9024005' from "SNOMED" display 'G6PD Status'
code "normalResultCode": '280413001' from "SNOMED" display 'Normal'
code "deficientResultCode": '260372006' from "SNOMED" display 'Deficient'
code "intermediateResultCode": '11896004' from "SNOMED" display 'Intermediate'
code "haemoglobinLevelCode": '104142005' from "SNOMED" display 'Haemoglobin Level'
code "serviceReqCategory": '108252007' from "ServiceReqCategoryCodes" display 'Laboratory procedure'
code "diagReportCategory": 'HM' from "DiagReportCategoryCodes" display 'Hematology'


context Patient

define "Encounter":
  Last([Encounter] E
    where E.status ~ 'finished' )

define "AgeRange":
  AgeInYears() >= 16

define "Female":
  Patient.gender = 'female'

define "Male":
  Patient.gender = 'male'

define "is Pregnant":
  Last([Condition: "Pregnancy code"] O
    where O.clinicalStatus ~ "active"
      sort by recordedDate) is not null

define "OOOOBS": Observation

define "Registerd Haem":
  Last([Observation: "Haemoglobin code"] H)

define "Registerd G6PD":
  Last([Observation: "G6PD code"] G)

define "Registerd HBLevel":
  Last([Observation: "haemoglobinLevelCode"] G)

define "G6pd Value": "Registerd G6PD".value.value

//Define Thresholds
define "Deficient": "G6pd Value" <= 3.9

define "Intermediate": "Female" and "G6pd Value" >= 4.0  and "G6pd Value" <= 6.0

define "Normal Male": "Male" and "G6pd Value" >= 4.0

define "Normal Female": "Female" and "G6pd Value" >= 6.1

define "g6pdTestResultCode":
      if "Deficient" then "deficientResultCode"
      else if "Intermediate" then "intermediateResultCode"
      else if "Normal Male" or "Normal Female" then "normalResultCode"
      else if "Registerd HBLevel" is not null then toCode("Registerd HBLevel".value.coding[0])
      else null


define "patientRef": ReplaceMatches('Patient/'+Patient.id,'#','')
define "encounterRef": ReplaceMatches('Encounter/'+Encounter.id,'#','')

define "condition": if "g6pdTestResultCode" is not null
    then Condition {
      subject: CreateReference("patientRef"),
      encounter: CreateReference("encounterRef"),
      clinicalStatus: CreateConcept("active"),
      verificationStatus: CreateConcept("confirmed"),
      category: { CreateConcept("g6pdStatusCode") },
      code: CreateConcept("g6pdTestResultCode"),
      onset: dateTime{ value: Now() },
      recordedDate: dateTime{ value: Now() }
    } else null

define "serviceRequest": if "g6pdTestResultCode" is not null
   then ServiceRequest{
	  subject: CreateReference("patientRef"),
      encounter: CreateReference("encounterRef"),
      status: ServiceRequestStatus { value: 'completed'},
      intent: ServiceRequestIntent {value: 'order' },
      category: { CreateConcept("serviceReqCategory") },
      code: CreateConcept("G6PD code"),
      authoredOn: dateTime{ value: Now() }
} else null

define "diagnosticReport": if "g6pdTestResultCode" is not null
   then DiagnosticReport{
	  subject: CreateReference("patientRef"),
      encounter: CreateReference("encounterRef"),
      status: DiagnosticReportStatus { value: 'final'},
      category: { CreateConcept("diagReportCategory") },
      code: CreateConcept("G6PD code"),
      effective: dateTime{ value: Now() }
} else null

// output to save or display by the engine or parser
define "OUTPUT": List { "condition", "serviceRequest", "diagnosticReport" }

// helper functions
define function "CreateConcept"(code Code):
  CodeableConcept { coding: {
        Coding {
          code: code {value: "code".code },
          system: uri {value: "code".system },
          display: string {value: "code".display }
        }
  } }

define function "CreateReference"(ref String):
  Reference {reference: string { value: "ref" } }

define function "toCode"(coding Coding):
    Code {
      code: "coding".code,
      system: "coding".system,
      display: "coding".display
    }
