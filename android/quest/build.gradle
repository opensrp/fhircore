plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'de.mannodermaus.android-junit5'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'jacoco'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id "io.sentry.android.gradle" version "3.5.0"
    id "org.sonarqube" version "3.5.0.2730"
}

sonar {
    properties {
        property "sonar.projectKey", "fhircore"
        property "sonar.kotlin.source.version", "1.5"
        property "sonar.androidLint.reportPaths","${project.buildDir}/reports/lint-results-questDebug.xml"
        property "sonar.host.url", "https://sonarqube.fhir.onalabs.org"
        property "sonar.login", System.getenv("SONAR_TOKEN")
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", '**/*Test*/**,' +
                '**/*test*/**,' +
                '**/.gradle/**,' +
                '**/R.class' +
                '*.json,' +
                '*.yaml,'
    }
}

apply from: '../jacoco.gradle'
apply from: '../properties.gradle'

android {
    compileSdkVersion sdk_versions.compile_sdk

    dataBinding {
        enabled true
    }

    defaultConfig {
        applicationId "org.smartregister.fhircore"
        minSdkVersion sdk_versions.min_sdk
        targetSdkVersion sdk_versions.target_sdk
        versionCode 1
        versionName "0.2.3"
        multiDexEnabled true

        buildConfigField("boolean", 'SKIP_AUTH_CHECK', "false")
        buildConfigField("String", 'FHIR_BASE_URL', "\"${FHIR_BASE_URL}\"")
        buildConfigField("String", 'OAUTH_BASE_URL', "\"${OAUTH_BASE_URL}\"")
        buildConfigField("String", 'OAUTH_CIENT_ID', "\"${OAUTH_CIENT_ID}\"")
        buildConfigField("String", 'OAUTH_CLIENT_SECRET', "\"${OAUTH_CLIENT_SECRET}\"")
        buildConfigField("String", 'OAUTH_SCOPE', "\"${OAUTH_SCOPE}\"")
        buildConfigField("boolean", 'GEOWIDGET_ENABLED', "$geowidgetEnabled")
        buildConfigField("String", "CONFIGURATION_SYNC_PAGE_SIZE", "\"100\"")
        buildConfigField("String", "SENTRY_DSN", "\"${SENTRY_DSN}\"")

        testInstrumentationRunner "org.smartregister.fhircore.quest.QuestTestRunner"
    }

    signingConfigs {
        release {

            v1SigningEnabled false
            v2SigningEnabled true

            keyAlias System.getenv("KEYSTORE_ALIAS") ?: project.KEYSTORE_ALIAS
            keyPassword System.getenv("KEY_PASSWORD") ?: project.KEY_PASSWORD
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: project.KEYSTORE_PASSWORD
            storeFile file(System.getProperty("user.home") + "/fhircore.keystore.jks")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'license.html'
        exclude 'readme.html'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/license.html'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'META-INF/sun-jaxb.episode'
        exclude("META-INF/*.kotlin_module")
        exclude("META-INF/AL2.0")
        exclude("META-INF/LGPL2.1")
        exclude("META-INF/INDEX.LIST")
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        freeCompilerArgs = ['-Xjvm-default=all-compatibility', '-opt-in=kotlin.RequiresOptIn']
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.3.0'
    }

    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    lintOptions {
        abortOnError false
    }

    flavorDimensions "apps"

    productFlavors {
        opensrp {
            dimension "apps"
            getIsDefault().set(true)
        }

        ecbis {
            dimension "apps"
            applicationIdSuffix ".ecbis"
            versionNameSuffix "-ecbis"
        }

        g6pd {
            dimension "apps"
            applicationIdSuffix ".g6pd"
            versionNameSuffix "-g6pd"
        }

        mwcore {
            dimension "apps"
            applicationIdSuffix ".mwcore"
            versionNameSuffix "-mwcore"
        }

        afyayangu {
            dimension "apps"
            applicationIdSuffix ".afyayangu"
            versionNameSuffix "-afyayangu"
        }

        map {
            dimension "apps"
            applicationIdSuffix ".map"
            versionNameSuffix "-map"
        }

        echis {
            dimension "apps"
            applicationIdSuffix ".echis"
            versionNameSuffix "-echis"
        }

        bunda {
            dimension "apps"
            applicationIdSuffix ".bunda"
            versionNameSuffix "-bunda"
        }

        wdf {
            dimension "apps"
            applicationIdSuffix ".wdf"
            versionNameSuffix "-wdf"
        }

        zeir {
            dimension "apps"
            applicationIdSuffix ".zeir"
            versionNameSuffix "-zeir"
        }

        engage {
            dimension "apps"
            applicationIdSuffix ".engage"
            versionNameSuffix "-engage"

        }
    }
    sourceSets {
        main {
            assets {
                srcDirs 'src/main/assets'
            }
        }
        test {
            resources {
                srcDirs 'src/test/assets'
            }
        }
    }

    splits {

        abi {

            enable false

            reset()

            // A list of ABIs for Gradle to create APKs for.
            include "armeabi-v7a","x86","arm64-v8a","x86_64"

            universalApk false
        }
    }
}

ext.abiCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, mips: 4, 'x86': 5, 'x86_64': 6]

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 10000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code doesn't override the version code for universal APKs.
        // However, because you want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the
            // version code for only the output APK, not for the variant itself. Skipping
            // this step causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbi
            VersionCode * 10000 + variant.versionCode
        }
    }
}

// Test Logging
tasks.withType(Test) {
    testLogging {
        events "failed"
    }
}

configurations {
    all*.exclude group: 'xpp3'
    all*.exclude group: 'commons-logging'
}

dependencies {
    coreLibraryDesugaring deps.desugar
    implementation(project(":engine"))
    implementation(project(":geowidget")) {
        transitive = true
    }
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    implementation 'androidx.ui:ui-foundation:0.1.0-dev03'
    implementation deps.lifecycle.viewmodel
    implementation('org.smartregister:p2p-lib:0.6.5-SNAPSHOT')
    implementation 'org.smartregister:fhir-common-utils:0.0.2-SNAPSHOT'
    implementation ('org.opencds.cqf.cql:evaluator.measure:2.4.0'){
        exclude group: 'xpp3'
    }
    implementation 'com.github.bumptech.glide:glide:4.13.0'

    //Hilt - Dependency Injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation "androidx.hilt:hilt-work:$hiltWorkerVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltWorkerVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

    implementation 'androidx.work:work-testing:2.7.1'

    testImplementation deps.junit5_api
    testRuntimeOnly deps.junit5_engine
    testRuntimeOnly deps.junit5_engine_vintage
    testImplementation deps.robolectric
    testImplementation deps.atsl.ext_junit
    testImplementation deps.atsl.ext_junit_ktx
    testImplementation deps.coroutines.test
    testImplementation deps.androidx.core_test
    debugImplementation deps.fragment_testing
    releaseImplementation deps.fragment_testing
    testImplementation deps.mockk
    testImplementation deps.kotlin.test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'

    // Hilt test dependencies
    testImplementation("com.google.dagger:hilt-android-testing:$hiltVersion")
    kaptTest("com.google.dagger:hilt-android-compiler:$hiltVersion")
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"

    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.espresso

    debugImplementation("androidx.compose.ui:ui-test-manifest:$composeVersion")
    testImplementation("androidx.navigation:navigation-testing:$navigationVersion")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$composeVersion")
    androidTestUtil 'androidx.test:orchestrator:1.4.2'

    androidTestImplementation deps.mockk_android
    androidTestImplementation "androidx.test:core-ktx:$versions.atsl_core"

   // debugImplementation because LeakCanary should only run in debug builds.
   // debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    testImplementation 'info.cqframework:cql-to-elm:2.4.0'
}
