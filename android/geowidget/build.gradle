plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'jacoco'
    id 'de.mannodermaus.android-junit5'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

apply from: '../properties.gradle'
apply from: '../jacoco.gradle'

android {
    compileSdkVersion 33

    dataBinding {
        enabled true
    }

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        buildConfigField("String", 'MAPBOX_SDK_TOKEN', "\"${MAPBOX_SDK_TOKEN}\"")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        freeCompilerArgs = ['-Xjvm-default=all-compatibility', '-opt-in=kotlin.RequiresOptIn']
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.3.0'
    }

    packagingOptions {
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'license.html'
        exclude 'readme.html'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/license.html'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'META-INF/sun-jaxb.episode'
        exclude("META-INF/*.kotlin_module")
        exclude("META-INF/AL2.0")
        exclude("META-INF/LGPL2.1")
        exclude("META-INF/INDEX.LIST")
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// Test Logging
tasks.withType(Test) {
    testLogging {
        events "failed"
    }
}

configurations {
    all*.exclude group: 'xpp3'
}

dependencies {
    coreLibraryDesugaring(libs.core.desugar)

    implementation(project(":engine"))
    implementation(libs.core.ktx)
    implementation(libs.appcompat)
    implementation(libs.material)
    implementation(libs.dagger.hilt.android)
    implementation(libs.hilt.work)
    implementation(libs.mapbox.sdk.turf)
    implementation(libs.kujaku.library) {
        transitive = true
        exclude group: 'stax', module: 'stax-api'
    }

    //Annotation processors
    kapt(libs.hilt.compiler)
    kapt(libs.dagger.hilt.compiler)

    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.junit.vintage.engine)

    // Unit test dependencies
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.robolectric)
    testImplementation(libs.junit)
    testImplementation(libs.junit.ktx)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.core.testing)
    testImplementation(libs.mockk)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.hilt.android.testing)
    testImplementation(libs.navigation.testing)

    // To run only on debug builds
    debugImplementation(libs.ui.test.manifest)
    debugImplementation(libs.fragment.testing)

    //Annotation processors for test
    kaptTest(libs.hilt.android.compiler)
    kaptAndroidTest(libs.hilt.android.compiler)

    //Android test dependencies
    androidTestImplementation(libs.hilt.android.testing)
    androidTestImplementation(libs.junit.ktx)
    androidTestImplementation(libs.espresso.core)
    androidTestImplementation(libs.ui.test.junit4)
    androidTestImplementation(libs.mockk.android)
    androidTestImplementation(libs.core.ktx.test)
}