map "http://hl7.org/fhir/StructureMap/routine-screening-sm" = 'DC Routine Screening'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group RoutineScreening(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition,
            evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
            evaluate(src, $this.parameter.where(name='period').value) as period,
            evaluate(src, $this.parameter.where(name='version').value) as version
            then ExtractTask(period, subject, tgt) "r_careplan";
}

group ExtractTask(
    source period: Period,
    source subject : Patient,
    target careplan: CarePlan){

    // Fill Task into CarePlan contained and add reference in activity.outcome
    subject -> create('Task') as task then {
        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.identifier = create('Identifier') as iden, iden.value = 'routine_screening', iden.use = 'secondary',
               task.status = 'requested',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               task.description = 'Screening Test',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "r_task_data";

        subject then extractPeriod(subject, task) "r_task_period_extr";

        // Screening form
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/dc-diabetes-screening' "r_task_reason_ref";

        // Add the valueReference
        subject -> task.input = create('Task_Input') as input then {
            subject -> input.value = create('Reference') as valueRef, valueRef.reference = 'PlanDefinition/dc-diabetes-screening-intervention' "r_task_input_value_ref";
            subject -> input.type = create('CodeableConcept') as taskCode then extractTaskCode(subject, taskCode) "r_task_input_cod";
        } "r_task_input";

        // Create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'Task').exists().not())
                -> careplan.activity = create('CarePlan_Activity') as activity then {
                   subject -> activity.detail = create('CarePlan_ActivityDetail') as det then {
                       subject -> det.kind = 'Task' "r_act_det_data";
                   } "r_act_det";
                } "r_cp_acti";

        // add task to careplan only if its valid and not expired
        subject where(task.executionPeriod.start >= today() or task.executionPeriod.end >= today()) then {
                 subject -> evaluate(careplan, activity.where(detail.kind = 'Task')) as activity,
                            activity.outcomeReference = reference(task) "r_cp_task_ref";
                 subject -> careplan.contained = task  "r_add_task";
        } "r_cp_task";
    } "r_task";
}

group extractTaskCode(source subject : Task,target concept: CodeableConcept){
      subject-> concept.coding = c("http://smartregister.org/", "plan_definition") as coding,
           coding.display = 'Plan Definition Reference' "r_cp_cod_disp";
      subject ->  concept.text = 'Plan Definition Reference' "r_cp_cc_txt";
}

group extractPeriod(source subject: Patient, target task: Task) {
    subject -> evaluate(task, $this.executionPeriod.start) as start, evaluate(task, $this.executionPeriod.end) as end then {
        subject -> create('Period') as period then {
            subject -> period.start = create('dateTime') as dateTime,
                dateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";

            subject -> period.end = create('dateTime') as dateTime,
                dateTime.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_per_start";
            
            subject -> task.executionPeriod = period "r_task_per";
        } "rule_period";
    } "r_per";
}