map "http://hl7.org/fhir/StructureMap/77288d60-eaeb-49e7-b6b7-97ad2d308c7f" = 'MR proposal Approval'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group childImmunizationSchedule(source src : Parameters, target careplan: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
        evaluate(src, $this.parameter.where(name='definition').resource) as definition,
        evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
        evaluate(src, $this.parameter.where(name='period').value) as period,
        evaluate(src, $this.parameter.where(name='version').value) as version
        then extractMedicationRequestPlan(period, version, subject, definition, questionnaireResponse, careplan) "r_careplan";
}

group extractMedicationRequestPlan(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

    questionnaireResponse.item as questionnaireResponseItem where(linkId = '79a24870-3575-4302-8aae-b66fed802fb7' and answer.exists()) then {
        questionnaireResponseItem where(linkId = '79a24870-3575-4302-8aae-b66fed802fb7' and answer.where(value.code = 'yes').exists()) then {
            subject -> create('MedicationRequest') as medicationRequest then {
                subject -> medicationRequest.id = uuid() "r_uuid";
                subject -> medicationRequest.status = 'active' "r_medication_request_status";
                subject -> medicationRequest.intent = 'plan' "r_medication_request_intent";
                subject -> medicationRequest.basedOn = create('Reference') as ref, ref.reference = evaluate(questionnaireResponse, 'MedicationRequest/' + $this.item.where(linkId = 'c1d8fed1-ff36-43b6-8061-22561154b13b').answer.value) "rule_update_flag_partOf";
                subject -> medicationRequest.reasonCode = create('CodeableConcept') as concept then {
                    subject -> concept.coding = c("http://snomed.info/sct", "1000001") as coding then {
                        subject -> coding.display = 'Assess For Immunization' "r_en_cod_disp";
                    } "r_en_cc_cod";
                subject ->  concept.text = 'Asses Immunization ' "r_en_cod_text";
                } "r_medication_request_reason_code";

                subject -> medicationRequest.supportingInformation = create('Reference') as questionnaireReference, questionnaireReference.reference = 'Questionnaire/fbfd01eb-6ed7-426e-add5-b8dffe7ec3de'
                then extractMedicationRequest(period, version, subject, definition, careplan, medicationRequest), updateMedicationRequestAccepted(period, version, subject, definition, questionnaireResponse, careplan) "r_medication_request_plan";
            } "generate_medication_request";
        } "questionnaire_response_item_contraindication";
    } "questionnaire_response_item";

    questionnaireResponse.item as questionnaireResponseItem where(linkId = '79a24870-3575-4302-8aae-b66fed802fb7' and answer.exists()) then {
        questionnaireResponseItem where(linkId = '79a24870-3575-4302-8aae-b66fed802fb7' and answer.where(value.code = 'no').exists()) then {
            subject then updateMedicationRequestRejected(period, version, subject, definition, questionnaireResponse, careplan) "r_medication_request_plan_rejected";
        } "questionnaire_response_item_contraindication";
    } "questionnaire_response_item_contraindication";

    questionnaireResponse.item as questionnaireResponseItem where(linkId = '79a24870-3575-4302-8aae-b66fed802fb7' and answer.exists().not()) then {
        subject then updateMedicationRequestRejected(period, version, subject, definition, questionnaireResponse, careplan) "r_medication_request_plan_rejected";
    } "questionnaire_response_item";
}

group extractMedicationRequest(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    target careplan: CarePlan,
    target medicationRequest: MedicationRequest) {

    // fill task into careplan contained and add reference in activity.outcome
    subject -> // dosage[version] does not work, hence skipping the item from given index via skip.first
        evaluate(definition, $this.dosage.skip(version).first()) as currentDose then {

        subject -> medicationRequest.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            medicationRequest.subject = create('Reference') as patientReference, patientReference.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
            medicationRequest.dispenseRequest = create('Dispense_Request') as dispenseRequest, dispenseRequest.validityPeriod = period,
            medicationRequest.doNotPerform = false,
            medicationRequest.authoredOn = evaluate(subject, now()),
            medicationRequest.recorder = evaluate(subject, $this.generalPractitioner.first()),
            medicationRequest.medication = evaluate(definition, $this.code),
            medicationRequest.medication = evaluate(definition, $this.product) "r_task_data";

        //subject then extractPeriod(subject, medicationRequest) "r_task_period_extraction";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'MedicationRequest').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'MedicationRequest' "rule_activity_detail_data";
            } "rule_activity_detail";
        } "rule_careplan_activity";

        // add MR to careplan irrespective of its validity
        subject then {
            subject -> evaluate(careplan, activity.where(detail.kind = 'MedicationRequest')) as activity, activity.outcomeReference = reference(medicationRequest) "rule_careplan_task_reference";
            subject -> careplan.contained = medicationRequest "rule_add_task";
        } "rule_careplan_task";
    } "r_task";
}

group updateMedicationRequestAccepted(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

    subject -> create('MedicationRequest') as medicationRequest then {
        subject -> medicationRequest.id =  create('id') as id then {
            subject -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'c1d8fed1-ff36-43b6-8061-22561154b13b').answer.value) "rule_update_medication_request_value";
        } "rule_update_medication_request_value_id";
        //subject -> medicationRequest.basedOn = create('Reference') as ref, ref.reference = evaluate(careplan, 'CarePlan/' + $this.id.replaceMatches('/_history/.*', '').replaceMatches('CarePlan/', '')) "rule_update_flag_basedOn";
        subject -> medicationRequest.status = 'completed' "r_medication_request_status";
        subject -> medicationRequest.intent = 'proposal' "r_medication_request_intent";

        subject then extractMedicationRequest(period, version, subject, definition, careplan, medicationRequest) "r_medication_request_plan";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'MedicationRequest').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'MedicationRequest' "rule_activity_detail_data";
            } "rule_activity_detail";
        } "rule_careplan_activity";
    } "generate_medication_request";
}

group updateMedicationRequestRejected(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    source questionnaireResponse: QuestionnaireResponse,
    target careplan: CarePlan) {

    subject -> create('MedicationRequest') as medicationRequest then {
        subject -> medicationRequest.id =  create('id') as id then {
            subject -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'c1d8fed1-ff36-43b6-8061-22561154b13b').answer.value) "rule_update_medication_request_value";
        } "rule_update_medication_request_value_id";
        //subject -> medicationRequest.basedOn = create('Reference') as ref, ref.reference = evaluate(careplan, 'CarePlan/' + $this.id.replaceMatches('/_history/.*', '').replaceMatches('CarePlan/', '')) "rule_update_flag_basedOn";
        subject -> medicationRequest.status = 'cancelled' "r_medication_request_status";
        subject -> medicationRequest.intent = 'proposal' "r_medication_request_intent";

        subject -> medicationRequest.statusReason = create('CodeableConcept') as concept then {
            subject -> concept.coding = c("http://snomed.info/sct", "1000004") as coding then {
                subject -> coding.display = evaluate(questionnaireResponse, $this.item.where(linkId = '1e04fcd0-0fd5-42c1-a00b-b3addd629d13').answer.value) "r_en_cod_disp";
            } "r_en_cc_cod";
            subject ->  concept.text = evaluate(questionnaireResponse, $this.item.where(linkId = '1e04fcd0-0fd5-42c1-a00b-b3addd629d13').answer.value) "r_en_cod_text";
        } "r_medication_request_reason_code";

        subject then extractMedicationRequest(period, version, subject, definition, careplan, medicationRequest) "r_medication_request_plan";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'MedicationRequest').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'MedicationRequest' "rule_activity_detail_data";
            } "rule_activity_detail";
        } "rule_careplan_activity";
    } "generate_medication_request";
}

group extractPeriod(source subject: Patient, target medicationRequest: MedicationRequest) {
    subject -> evaluate(medicationRequest, $this.dispenseRequest) as dispenseRequest, evaluate(dispenseRequest, $this.validityPeriod.start) as start,
        evaluate(dispenseRequest, $this.validityPeriod.end) as end then {
        subject -> create('Period') as period then {
            subject -> period.start = create('dateTime') as startDateTime,
                startDateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "rule_period_start";

            subject -> period.end = create('dateTime') as endDateTime,
                endDateTime.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "rule_period_end";

            subject -> medicationRequest.dispenseRequest = create('Dispense_Request') as dispenseRequest, dispenseRequest.validityPeriod = period "rule_execution_period";
        } "rule_period";
    } "rule_task_execution_period";
}