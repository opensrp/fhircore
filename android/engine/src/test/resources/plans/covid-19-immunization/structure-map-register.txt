map "http://hl7.org/fhir/StructureMap/3c965470-065e-11ee-be56-0242ac120002" = 'CovidImmunizationCarePlan'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group CovidImmunizationCarePlan(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition,
            evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
            evaluate(src, $this.parameter.where(name='period').value) as period,
            evaluate(src, $this.parameter.where(name='version').value) as version
            then ExtractTask(period, version, subject, definition, tgt) "r_careplan";
}

group ExtractTask(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    target careplan: CarePlan){

    // fill task into careplan contained and add reference in activity.outcome
    subject -> create('Task') as task then {
        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.status = 'requested',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               // dosage[version] does not work, hence skipping the item from given index via skip.first
               task.description = evaluate(definition, $this.product.text + ' ' + $this.dosage.skip(version).first().select(sequence.toString().replaceMatches('9999', 'Booster') + ' at ' + timing.repeat.period.toString() + ' ' + timing.repeat.periodUnit)),
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.type().name + '/' + $this.id.replaceMatches('/_history/.*', '')),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()),
               task.code = evaluate(definition, code),
               task.reasonCode = evaluate(definition, product) "r_task_data";

       subject -> task.input = create('Task_Input') as input then{
            subject -> input.type = create("CodeableConcept") as concept "r_concept";
            subject -> input.value = evaluate(definition,$this.product.text + ' ' +$this.dosage.skip(version).first().select((sequence).toString())) "r_input_value";
       } "r_task_input";

        // form to be filled
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/e8572c86-065d-11ee-be56-0242ac120002' "r_task_reason_ref";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'Task').exists().not())
                -> careplan.activity = create('CarePlan_Activity') as activity then {
                   subject -> activity.detail = create('CarePlan_ActivityDetail') as det then {
                       subject -> det.kind = 'Task' "r_act_det_data";
                   } "r_act_det";
               } "r_cp_acti";

        // add task to careplan irrespective of its validity
         subject -> evaluate(careplan, activity.where(detail.kind = 'Task')) as activity,
                    activity.outcomeReference = reference(task) "r_cp_task_ref";
         subject -> careplan.contained = task "r_add_task";
    } "r_task";
}
