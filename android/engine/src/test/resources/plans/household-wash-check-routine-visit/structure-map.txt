map "http://hl7.org/fhir/StructureMap/2fc0afe2-6eef-4294-a9d2-66c0b3162904" = "WASHCheckRoutineCarePlan"

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group WASHCheckRoutineCarePlan(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition
            then ExtractCarePlan(subject, definition, tgt), ExtractActivityDetail(subject, definition, tgt) "r_wc_careplan";
}

group ExtractCarePlan(source subject: Group, source definition: ActivityDefinition, target careplan : CarePlan) {

        subject -> careplan.id = uuid(),
            careplan.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            careplan.status = 'active',
            careplan.intent = 'plan',
            careplan.subject = create('Reference') as ref, ref.reference = evaluate(subject, $this.id),
            careplan.created = evaluate(subject, now()),
            careplan.author = evaluate(subject, $this.generalPractitioner.first()),
            careplan.period = create('Period') as period, evaluate(subject, today()) as offset then ExtractPeriod_now_5y(offset, period) "r_cp_data";
}

group ExtractActivityDetail(source subject : Group,
    source definition: ActivityDefinition, target careplan : CarePlan){
    subject -> careplan.activity = create('CarePlan_Activity') as activity then {
        subject -> activity.detail = create('CarePlan_ActivityDetail') as actDet then {
            subject -> actDet.kind = 'Task',
            actDet.status = 'in-progress',
            actDet.description = evaluate(definition, $this.title),
            actDet.performer = evaluate(subject, $this.generalPractitioner.first()),
            actDet.code = create('CodeableConcept') as concept then ExtractDetailCode(subject, concept) "r_act_det_data";

            subject -> actDet.scheduled = evaluate(definition, $this.timing) as timing,
                   evaluate(timing, $this.repeat) as repeat then {

                subject -> evaluate(subject, today()) as offset,
                    evaluate(careplan, $this.period) as range then
                        ExtractTasks(offset, range, subject, careplan, activity, timing) "r_tasks";


                subject -> repeat.count = create('positiveInt') as c, c.value = '1' "r_task_rep_count";

            } "r_tim_repeat";
        } "r_act_det";

    } "r_cp_acti";
}

group ExtractTasks(
    source offset: DateType,
    source range: Period,
    source subject : Group,
    target careplan: CarePlan,
    target activity : CarePlan_Activity,
    target timing: Timing){

        offset where(offset >= today() and offset < range.end) -> evaluate(offset, $this.value.substring(0,7) + '-01') as startStr,
                create('date') as start, start.value = startStr,
                create('Period') as period,
                careplan.contained = create('Task') as task then {
        subject then ExtractPeriod_1m(start, period) "r_task_period_extr";

        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.status = 'requested',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               task.description = 'Household WASH Check Task',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "r_task_data";

        subject -> task.reasonReference = create('Reference') as ref,
               ref.reference = 'Questionnaire/fb9dae45-e828-4c1c-9201-438d7a4e01ab' "r_wc_task_reason_ref";

        subject -> activity.outcomeReference = reference(task) "r_cp_task_ref";
        subject -> timing.event = evaluate(period, $this.start) "r_activity_timing";

        subject -> evaluate(period, $this.end) as newoffset then ExtractTasks(newoffset, range, subject, careplan, activity, timing) "r_task_repeat";
    } "r_cp_acti_outcome";
}

group ExtractPeriod_now_5y(source birthdate : DateType, target period: Period){
    birthdate -> evaluate(birthdate, today()) as start,
                 evaluate(birthdate, $this + 60 'month') as end then
                 ExtractPeriod(start, end, period) "r_period";
}

group ExtractPeriod_1m(source offset : DateType, target period: Period){
    offset -> offset as start,
              evaluate(offset, $this + 1 'month') as end then
              ExtractPeriod(start, end, period) "r_period";
}

group ExtractPeriod(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00') "r_per_start";

    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00') "r_per_end";
}

group ExtractDetailCode(source subject : Group, target concept: CodeableConcept){
    subject -> concept.coding = c("http://www.snomed.org/", "710562003") as coding then {
        subject -> coding.display = 'Assessment of sanitation' "r_wc_cod_disp";
    } "r_wc_cc_cod";
    subject -> concept.text = 'Assessment of sanitation' "r_wc_cc_txt";
}