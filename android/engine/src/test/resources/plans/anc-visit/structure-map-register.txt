map "http://hl7.org/fhir/StructureMap/132156" = 'ANCCarePlan'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group ANCCarePlan(source src : Parameters, target tgt: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
            evaluate(src, $this.parameter.where(name='definition').resource) as definition,
            evaluate(src, $this.parameter.where(name='depends-on').resource.entry.resource) as questionnaireResponse,
            evaluate(src, $this.parameter.where(name='period').value) as period,
            evaluate(questionnaireResponse, $this.descendants().where(linkId='245679f2-6172-456e-8ff3-425f5cea3243').answer.value) as lmp
            then ExtractTask(period, subject, tgt) "r_careplan";
}

group ExtractTask(
    source period: Period,
    source subject : Patient,
    target careplan: CarePlan){

        subject -> task.id = uuid(),
               task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
               task.status = 'ready',
               task.intent = 'plan',
               task.executionPeriod = period,
               task.priority = 'routine',
               task.description = 'ANC Follow Up Task',
               task.for = create('Reference') as ref, ref.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
               task.basedOn = reference(careplan),
               task.authoredOn = evaluate(subject, now()),
               task.requester = evaluate(subject, $this.generalPractitioner.first()),
               task.owner = evaluate(subject, $this.generalPractitioner.first()) "r_task_data";

        // anc followup form
        subject -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/132155' "r_task_reason_ref";

        subject -> activity.outcomeReference = reference(task) "r_cp_task_ref";
        subject -> timing.event = evaluate(period, $this.start) "r_activity_timing";
}

group ExtractPeriod(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt,
             dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00') "r_per_start";

    end -> period.end = create('dateTime') as dt,
           dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00') "r_per_end";
}
