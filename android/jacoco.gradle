task jacocoTestReport(type: JacocoReport, dependsOn: [
        "testDebugUnitTest",
//       Uncomment to include instrumentation tests coverage
//       "createDebugCoverageReport"
]) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            // Android
            '**Constant*.*',
            '**/*$ViewBinder*.*',
            'android/**/*.*',
            '**/Application*.*',
            '**/*Test*.*',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/R.class',
            '**/R$*.class',
            // kotlin
            '**/*$Lambda$*.*',
            // Dagger and Hilt
            '**/*_Provide*/**',
            '**/*_Factory*/**',
            '**/*Module*.*',
            '**/*_Factory*.*',
            '**/*_MembersInjector.class',
            '**/*Dagger*',
            '**/di/*',
            '**/*Hilt*.*',
            // Data Binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
    ]

    def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
    def mainSrc = "$project.projectDir/src/main/java"
    def kotlinSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc, kotlinSrc]))
    classDirectories.setFrom(files([javaDebugTree, kotlinDebugTree]))

    executionData.setFrom(
            fileTree(dir: project.buildDir, includes: [
                    "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
                    // Uncomment to include instrumentation test coverage
                    // "outputs/code_coverage/debugAndroidTest/connected/**/*.ec"
            ])
    )
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}