def module = project.name == "quest" ? "Quest" : ""

task fhircoreJacocoReport(type: JacocoReport, dependsOn: [
        "test${module}DebugUnitTest",
        "connected${module}DebugAndroidTest"
]) {

    reports {
        xml.required = true
        html.required = true
    }

    def excludes = [
            // Android
            '**Constant*.*',
            '**/*$ViewBinder*.*',
            'android/**/*.*',
            '**/*Application*.*',
            '**/*Test*.*',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/R.class',
            '**/R$*.class',
            '**/*Preview*.*',
            // kotlin (Sealed and Data classes)
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*$Result.*',
            '**/*$Result$*.*',
            // DI (Dagger and Hilt)
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/dagger/hilt/internal/*',
            '**/hilt_aggregated_deps/*',
            '**/di/*',
            '**/*Hilt*.*',
            // Data Binding
            '**/databinding/*'
    ]

    def moduleVariant = project.name == "quest" ? "questDebug" : "debug"
    def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/javac/${moduleVariant}/classes/", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${moduleVariant}", excludes: excludes)
    def mainSrc = "$project.projectDir/src/main/java"
    def kotlinSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc, kotlinSrc]))
    classDirectories.setFrom(files([javaDebugTree, kotlinDebugTree]))

    executionData.setFrom(
            fileTree(dir: project.buildDir, includes: [
                    "outputs/unit_test_code_coverage/${moduleVariant}UnitTest/test${module}DebugUnitTest.exec",
                    "outputs/code_coverage/${moduleVariant}AndroidTest/connected/**/*.ec"
            ])
    )
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}