map "http://fhir.labs.smartregister.org/fhir/StructureMap/12074" = 'ANCServiceEnrollment'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ANCServiceEnrollment(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.type = 'collection' "r_bun_type";
    src then
        ExtractGoal(src, bundle),
        ExtractCondition(src, bundle) "r_bun_entries_gc";

    src -> evaluate(bundle, $this.entry.resource.where($this.is(Condition))) as condition then {
        src then ExtractEpisodeOfCare(src, bundle, condition) "r_bun_entries_ep";
        src -> evaluate(bundle, $this.entry.resource.where($this.is(EpisodeOfCare))) as episode then
            ExtractEncounter(src, bundle, condition, episode) "r_bun_entries_en";
        src -> evaluate(bundle, $this.entry.resource.where($this.is(Encounter))) as encounter then
             ExtractLmp(src, bundle, encounter),
             ExtractEdd(src, bundle, encounter),
             ExtractGravida(src, bundle, encounter),
             ExtractLiveBirths(src, bundle, encounter) "r_bun_entries_o";
    } "r_bun_entries_eeo";

    src -> evaluate(bundle, $this.entry.resource.where($this.is(Condition))) as condition,
        evaluate(bundle, $this.entry.resource.where($this.is(Goal))) as goal,
        evaluate(bundle, $this.entry.resource.where($this.is(EpisodeOfCare))) as episode,
        evaluate(bundle, $this.entry.resource.where($this.is(Encounter))) as encounter then
            ExtractCarePlan(src, bundle, condition, goal, episode, encounter) "r_bun_entries_cp";
}

group ExtractGoal(source src : QuestionnaireResponse, target bundle : Bundle) {
    src -> bundle.entry as entry, entry.resource = create('Goal') as goal then {
        src -> goal.id = uuid() "r_g_id";
        src -> goal.lifecycleStatus = 'active' "r_g_st";
        src.subject as subject -> goal.subject = subject "r_g_sub";
    } "r_g";
}

    // TODO episode of care, participant info, condition, goal, careplan
group ExtractCondition(source src : QuestionnaireResponse, target bundle : Bundle) {
    src -> bundle.entry as entry, entry.resource = create('Condition') as condition then {
        src -> condition.id = uuid() "r_c_id";
        src -> condition.clinicalStatus = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") as coding then {
                src -> coding.display = 'Active' "r_c_ct_cod_disp";
            } "r_c_ct_coding";
            src -> concept.text = "Active" "r_c_ct_text";
        } "r_c_ct";
        src -> condition.verificationStatus = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/condition-ver-status", "confirmed") as coding then {
                src -> coding.display = 'Confirmed' "r_c_vs_cod_disp";
            } "r_c_vs_coding";
            src -> concept.text = "Confirmed" "r_c_vs_text";
        } "r_c_vs";
        src -> condition.category = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/condition-category", "problem-list-item") as coding then {
                src -> coding.display = 'Problem List Item' "r_c_cod_disp";
            } "r_c_cc_cod";
            src -> concept.text = "Problem List Item" "r_c_cc_txt";
        } "r_c_cat";
        src.subject as subject -> condition.subject = subject "r_c_sub";
        src -> condition.onset = evaluate(src, now()) "r_c_onset";
        src -> condition.code = create('CodeableConcept') as concept then {
          src -> concept.coding = c("http://loinc.org", "LA15173-0") as coding then {
              src -> coding.display = 'Pregnant' "r_c_cod_disp";
          } "r_c_cc_cod";
          src -> concept.text = "Pregnant" "r_c_cod_text";
       } "r_c_code";
   } "r_c";
}

group ExtractEpisodeOfCare(source src : QuestionnaireResponse, target bundle : Bundle, target condition : Condition) {
    src -> bundle.entry as entry, entry.resource = create('EpisodeOfCare') as episode then {
        src -> episode.id = uuid() "r_ep_id";
        src -> episode.status = 'active' "r_ep_st";
        src -> episode.type = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/episodeofcare-type", "hacc") as coding then {
                src -> coding.display = 'Home and Community Care' "r_ep_cod_disp";
            } "r_ep_cc_cod";
            src -> concept.text = "Home and Community Care" "r_ep_typ_text";
        } "r_ep_typ";
        src -> episode.diagnosis = create('EpisodeOfCare_Diagnosis') as diag then {
            src -> diag.condition = reference(condition) "r_ep_diag_condition";
            src -> diag.rank = create('positiveInt') as posInt then {
               src -> posInt.value = "1" "r_sp_diag_rank_val";
            } "r_ep_diag_rank";
            src -> diag.role = create('CodeableConcept') as concept then {
               src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/diagnosis-role", "CC") as coding then {
                   src -> coding.display = 'Chief complaint' "r_ep_cod_disp";
               } "r_ep_cc_cod";
               src -> concept.text = "Chief complaint" "r_ep_typ_text";
            } "r_ep_diag_role";
        } "r_ep_diag";
        // TODO https://github.com/opensrp/fhircore/issues/560
        src -> episode.period = create('Period') as enPeriod then {
            src -> enPeriod.start = evaluate(src, now()) "r_ep_per_start";
        } "r_ep_per";
        src.subject as subject -> episode.patient = subject "r_ep_sub";
    } "r_ep";
}

group ExtractEncounter(source src : QuestionnaireResponse, target bundle: Bundle,
    target condition: Condition,
    target episode : EpisodeOfCare) {
    src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
        src -> encounter.id = uuid() "r_en_id";
        src -> encounter.status = 'in-progress' "r_en_st";
        src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "r_en_cls";
        src -> encounter.type = create('CodeableConcept') as concept then {
            src -> concept.coding = c("http://example.org/CodeSystem/encounter-type", "anc-contact") as coding then {
                src -> coding.display = 'Antenatal care contact' "r_en_cod_disp";
            } "r_en_cc_cod";
            src -> concept.text = "Antenatal care contact" "r_en_typ_text";
        } "r_en_typ";
        // TODO episode of care, participant info, condition, goal, careplan
        src -> encounter.episodeOfCare = reference(episode) "r_en_episode";
        src -> encounter.diagnosis = create('Encounter_Diagnosis') as diag then {
            src -> diag.condition = reference(condition) "r_en_diag_condition";
            src -> diag.rank = create('positiveInt') as posInt then {
               src -> posInt.value = "1" "r_diag_rank_val";
            } "r_en_diag_rank";
        } "r_en_diag";
        src -> encounter.participant = create('Encounter_Participant') as part then {
            src -> part.type = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "PPRF") as coding then {
                    src -> coding.display = 'primary performer' "r_cc_cod_disp";
                } "r_cc_cod";
                src -> concept.text = 'Primary Performer' "r_cc_text";
            } "r_en_part_typ";
            // TODO https://github.com/opensrp/fhircore/issues/560 part.individual = ??
        } "r_en_part";
        src -> encounter.period = create('Period') as enPeriod then {
            src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
        } "r_en_per";
        src.subject as subject -> encounter.subject = subject "r_en_sub";
    } "r_en";
}

group ExtractLmp(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as lmp_item where(linkId = 'lmp' and answer.count() > 0) then {
        src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
            src -> obs.id = uuid() "r_ob_id";
            src -> obs.status = "registered" "r_ob_st";
            src -> obs.code = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://snomed.info/sct", "21840007") as coding then {
                    src -> coding.display = 'Date of last menstrual period' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = "LMP" "r_ob_cc_txt";
            } "r_ob_cc";
            src.subject as subject -> obs.subject = subject "r_ob_sub";
            src -> obs.effective = create('Period') as period then {
                src -> period.start = evaluate(period, now()) "r_ob_per_st";
                src -> period.end = evaluate(period, now()) "r_ob_per_end";
            } "r_ob_per";
            src -> obs.value = create('dateTime') as dt then {
               src -> dt.value = evaluate(lmp_item, answer.value.substring(0,10) + 'T00:00:00') "r_ob_value";
            } "r_ob_val";
            src -> obs.encounter = reference(encounter) "r_ob_en";
            src -> obs.category = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/observation-category", 'survey') as coding then {
                    src -> coding.display = 'Survey' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = 'Survey' "r_ob_cat_text";
            } "r_ob_cat";
        } "r_ob_lmp";
    };
}

group ExtractEdd(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as edd_item where(linkId = 'edd' and answer.count() > 0) then {
        src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
            src -> obs.id = uuid() "r_ob_id";
            src -> obs.status = "registered" "r_ob_st";
            src -> obs.code = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://snomed.info/sct", "161714006") as coding then {
                    src -> coding.display = 'Estimated date of delivery' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = "EDD" "r_ob_cc_txt";
            } "r_ob_cc";
            src.subject as subject -> obs.subject = subject "r_ob_sub";
            src -> obs.effective = create('Period') as period then {
                src -> period.start = evaluate(period, now()) "r_ob_per_st";
                src -> period.end = evaluate(period, now()) "r_ob_per_end";
            } "r_ob_per";
            src -> obs.value = create('dateTime') as dt then {
              src -> dt.value = evaluate(edd_item, answer.value.substring(0,10) + 'T00:00:00') "r_ob_value";
            } "r_ob_val";
            src -> obs.encounter = reference(encounter) "r_ob_en";
            src -> obs.category = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/observation-category", 'survey') as coding then {
                    src -> coding.display = 'Survey' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = 'Survey' "r_ob_cat_text";
            } "r_ob_cat";
        } "r_ob_edd";
    };
}

group ExtractGravida(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as gravida_item where(linkId = 'previous_pregnancies' and answer.count() > 0) then {
        src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
            src -> obs.id = uuid() "r_ob_id";
            src -> obs.status = "registered" "r_ob_st";
            src -> obs.code = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://snomed.info/sct", "246211005") as coding then {
                    src -> coding.display = 'Number of previous pregnancies' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = "Gravida" "r_ob_cc_txt";
            } "r_ob_cc";
            src.subject as subject -> obs.subject = subject "r_ob_sub";
            src -> obs.effective = create('Period') as period then {
                src -> period.start = evaluate(period, now()) "r_ob_per_st";
                src -> period.end = evaluate(period, now()) "r_ob_per_end";
            } "r_ob_per";
            src -> obs.value = evaluate(gravida_item, answer.value) "r_ob_val";
            src -> obs.encounter = reference(encounter) "r_ob_en";
            src -> obs.category = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/observation-category", 'survey') as coding then {
                    src -> coding.display = 'Survey' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = 'Survey' "r_ob_cat_text";
            } "r_ob_cat";
        } "r_ob_grav";
    };
}

group ExtractLiveBirths(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as liv_del_item where(linkId = 'live_deliveries' and answer.count() > 0) then {
        src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
            src -> obs.id = uuid() "r_ob_id";
            src -> obs.status = "registered" "r_ob_st";
            src -> obs.code = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://snomed.info/sct", "248991006") as coding then {
                    src -> coding.display = 'Number of live deliveries' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = "Live Deliveries" "r_ob_cc_txt";
            } "r_ob_cc";
            src.subject as subject -> obs.subject = subject "r_ob_sub";
            src -> obs.effective = create('Period') as period then {
                src -> period.start = evaluate(period, now()) "r_ob_per_st";
                src -> period.end = evaluate(period, now()) "r_ob_per_end";
            } "r_ob_per";
            src -> obs.value = evaluate(liv_del_item, answer.value) "r_ob_val";
            src -> obs.encounter = reference(encounter) "r_ob_en";
            src -> obs.category = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/observation-category", 'survey') as coding then {
                    src -> coding.display = 'Survey' "r_ob_cod_disp";
                } "r_ob_cc_cod";
                src -> concept.text = 'Survey' "r_ob_cat_text";
            } "r_ob_cat";
        } "r_ob_liv_del";
    };
}

group ExtractCarePlan(source src : QuestionnaireResponse, target bundle : Bundle,
target condition : Condition, target goal : Goal, target episode : EpisodeOfCare, target encounter : Encounter) {
    src.item as lmp_item where(linkId = 'lmp') -> evaluate(lmp_item, answer.value) as lmp, bundle.entry as entry, entry.resource = create('CarePlan') as cp then {
        src -> cp.id = uuid() "r_cp_id";
        src -> cp.extension = create('Extension') as epis then {
            src -> epis.url = 'http://fhir.org/guides/who/anc-cds/StructureDefinition/careplan-episodeOfCare' "r_ext_url";
            src -> epis.value = reference(episode) "r_ext_val";
        } "r_cp_epis";
        src -> cp.instantiatesCanonical = 'http://fhir.org/guides/who/anc-cds/PlanDefinition/anc-contact-schedule' "r_cp_inst_can";
        src -> cp.status = 'active' "r_cp_status";
        src -> cp.intent = 'plan' "r_cp_intent";
        src.subject as subject -> cp.subject = subject "r_cp_sub";
        // TODO src -> cp.careteam = ??
        src -> cp.addresses = reference(condition) "r_cp_condition";
        src -> cp.goal = reference(goal) "r_cp_goal";
        src -> cp.period = create('Period') as period then
            ExtractLmpPeriod_0_40(lmp, period) "r_cp_per";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('in-progress') as status,
                copy('First antenatal care contact') as description then
            ExtractAncContactCode(src, concept),
            ExtractFirstActivityDetail(src, status, concept, description, encounter, cp) "r_cp_acti_det_1";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('scheduled') as status,
                copy('Second contact to occur at 20 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_20_26(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_2";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Third contact to occur at 26 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_26_30(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_3";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Fourth contact to occur at 30 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_30_34(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_4";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Fifth contact to occur at 34 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_34_36(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_5";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Sixth contact to occur at 36 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_36_38(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_6";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Seventh contact to occur at 38 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_38_40(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_7";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Eighth contact to occur at 40 weeks of gestational age') as description then
            ExtractAncContactCode(src, concept),
            ExtractLmpPeriod_40_42(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_8";
        src -> create('CodeableConcept') as concept,
                create('Period') as period,
                copy('not-started') as status,
                copy('Delivery') as description then
            ExtractAncDeliveryCode(src, concept),
            ExtractLmpPeriod_40_42(lmp, period),
            ExtractActivityDetail(src, status, concept, description, period, cp) "r_cp_acti_det_9";

    } "r_cp";
}

group ExtractAncContactCode(source src : QuestionnaireResponse, target concept: CodeableConcept){
    src -> concept.coding = c("http://example.org/CodeSystem/encounter-type", "anc-contact") as coding then {
        src -> coding.display = 'Antenatal care contact' "r_cp_cod_disp";
    } "r_cp_cc_cod";
    src -> concept.text = "Antenatal care contact" "r_cp_cc_txt";
}

group ExtractAncDeliveryCode(source src : QuestionnaireResponse, target concept: CodeableConcept){
    src -> concept.coding = c("http://example.org/mySystem", "del") as coding then {
        src -> coding.display = 'Delivery' "r_cp_cod_disp";
    } "r_cp_cc_cod";
    src -> concept.text = "Delivery" "r_cp_cc_txt";
}

group ExtractLmpPeriod_0_40(source lmp : DateType, target period: Period){
    lmp -> copy(lmp) as start, evaluate(lmp, $this + 40 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_20_26(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 20 "weeks") as start,
        evaluate(lmp, $this + 26 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_26_30(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 26 "weeks") as start,
        evaluate(lmp, $this + 30 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_30_34(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 30 "weeks") as start,
        evaluate(lmp, $this + 34 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_34_36(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 34 "weeks") as start,
        evaluate(lmp, $this + 36 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_36_38(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 36 "weeks") as start,
        evaluate(lmp, $this + 38 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_38_40(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 38 "weeks") as start,
        evaluate(lmp, $this + 40 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractLmpPeriod_40_42(source lmp : DateType, target period: Period){
    lmp -> evaluate(lmp, $this + 40 "weeks") as start,
        evaluate(lmp, $this + 42 "weeks") as end then
        ExtractPeriod(start, end, period) "r_period";
}

group ExtractPeriod(source start: DateType, source end: DateType, target period: Period) {
    start -> period.start = create('dateTime') as dt then {
        start -> dt.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00') "r_period_start_value";
    } "r_per_start";
    end as end -> period.end = create('dateTime') as dt then {
       end -> dt.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00') "r_period_end_value";
   } "r_per_end";
}

group ExtractFirstActivityDetail(source src : QuestionnaireResponse,
    source status: code,
    source detailCode: CodeableConcept,
    source description: string,
    source encounter: Encounter,
    target careplan : CarePlan){
    src -> careplan.activity = create('CarePlan_Activity') as activity then {
        src -> activity.outcomeReference = reference(encounter) "r_cp_en_ref";
        src -> activity.detail = create('CarePlan_ActivityDetail') as det then {
            src -> det.kind = 'ServiceRequest' "r_act_det_kind";
            src -> det.instantiatesCanonical = 'http://fhir.org/guides/who/anc-cds/PlanDefinition/anc-contact' "r_act_det_inst_can";
            src -> det.code = detailCode "r_act_det_cod";
            src -> det.status = status "r_act_det_st";
            // TODO det.performer = ??
            src -> det.description = description "r_act_det_desc";
        } "r_act_det";
    } "r_cp_acti";
}

group ExtractActivityDetail(source src : QuestionnaireResponse,
    source status: code,
    source detailCode: CodeableConcept,
    source description: string,
    source period: Period,
    target careplan : CarePlan){
    src -> careplan.activity = create('CarePlan_Activity') as activity then {
        src -> activity.detail = create('CarePlan_ActivityDetail') as det then {
            src -> det.kind = 'ServiceRequest' "r_act_det_kind";
            detailCode as cod where(text != 'Delivery') -> det.instantiatesCanonical = 'http://fhir.org/guides/who/anc-cds/PlanDefinition/anc-contact' "r_act_det_inst_can";
            src -> det.code = detailCode "r_act_det_cod";
            src -> det.status = status "r_act_det_st";
            src -> det.scheduled = period "r_act_det_period";
            // TODO det.performer = ??
            src -> det.description = description "r_act_det_desc";
        } "r_act_det";
    } "r_cp_acti";
}

