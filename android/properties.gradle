//FHIR CORE CREDENTIALS
ext.props = new Properties()

def fhirAuthArray = ["FHIR_BASE_URL", "OAUTH_BASE_URL", "OAUTH_CIENT_ID", "OAUTH_CLIENT_SECRET", "OAUTH_SCOPE", "MAPBOX_SDK_TOKEN", "SENTRY_DSN"]
if (rootProject.file("local.properties").exists()) {
    props.load(rootProject.file("local.properties").newDataInputStream())

    fhirAuthArray.each { propertyKey ->
        project.ext.set(propertyKey, props.getProperty(propertyKey, (propertyKey == "FHIR_BASE_URL") ? "https://sample.url/fhir/" : "sample"))
    }
} else {
    println("local.properties does not exist. The following values are required " + fhirAuthArray.join(", "))
    fhirAuthArray.each { propertyKey ->
        project.ext.set(propertyKey, props.getProperty(propertyKey, (propertyKey.contains("FHIR_BASE_URL")) ? "https://sample.url/fhir/" : "sample_" + propertyKey))
    }
}

//KEYSTORE CREDENTIALS
def keystoreAuthArray = ["KEYSTORE_ALIAS", "KEY_PASSWORD", "KEYSTORE_PASSWORD"]
if (rootProject.file("keystore.properties").exists()) {
    props.load(rootProject.file("keystore.properties").newDataInputStream())

    keystoreAuthArray.each { propertyKey ->
        project.ext.set(propertyKey, props.getProperty(propertyKey, "sample"))
    }
} else {
    println("keystore.properties does not exist. The following values are required " + keystoreAuthArray.join(", "))
    keystoreAuthArray.each { propertyKey ->
        project.ext.set(propertyKey, props.getProperty(propertyKey, "sample_" + propertyKey))
    }
}