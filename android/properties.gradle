//FHIR CORE CREDENTIALS
ext.props = new Properties()

def localPropertiesFilePath = project.hasProperty("localPropertyFile") ? project.getProperty("localPropertyFile") : "local.properties"

def fhirAuthArray = ["FHIR_BASE_URL", "OAUTH_BASE_URL", "OAUTH_CIENT_ID", "OAUTH_CLIENT_SECRET", "OAUTH_SCOPE", "MAPBOX_SDK_TOKEN", "SENTRY_DSN"]
if (rootProject.file(localPropertiesFilePath).exists()) {
    props.load(rootProject.file(localPropertiesFilePath).newDataInputStream())

    fhirAuthArray.each { localPropertyKey ->
        project.ext.set(localPropertyKey, props.getProperty(localPropertyKey, (localPropertyKey == "FHIR_BASE_URL") ? "https://sample.url/fhir/" : "sample"))
    }
} else {
    println("local.properties does not exist. The following values are required " + fhirAuthArray.join(", "))
    fhirAuthArray.each { propertyKey ->
        project.ext.set(propertyKey, props.getProperty(propertyKey, (propertyKey.contains("URL")) ? "https://sample.url/fhir/" : "sample_" + propertyKey))
    }
}

def keystorePropertiesFilePath = project.hasProperty("keystorePropertyFile") ? project.getProperty("keystorePropertyFile") :"keystore.properties"

//KEYSTORE CREDENTIALS
def keystoreAuthArray = ["KEYSTORE_ALIAS", "KEY_PASSWORD", "KEYSTORE_PASSWORD"]
if (rootProject.file(keystorePropertiesFilePath).exists()) {
    props.load(rootProject.file(keystorePropertiesFilePath).newDataInputStream())

    keystoreAuthArray.each { keystorePropertyKey ->
        project.ext.set(keystorePropertyKey, props.getProperty(keystorePropertyKey, "sample"))
    }
} else {
    println("keystore.properties does not exist. The following values are required " + keystoreAuthArray.join(", "))
    keystoreAuthArray.each { propertyKey ->
        project.ext.set(propertyKey, props.getProperty(propertyKey, "sample_" + propertyKey))
    }
}