map "http://hl7.org/fhir/StructureMap/PatientRegistration" = 'PatientRegistration'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as source

group PatientRegistration(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.id = uuid() "rule_c";
    src -> bundle.type = 'collection' "rule_b";
    src -> bundle.entry as entry, entry.resource = create('Patient') as patient then
        ExtractPatient(src, patient), ExtractRelatedPerson(src, bundle, patient) "rule_a";

    src.item as relatedPersonIdItem where(linkId = 'RP-id' and answer.count() = 0) then {
      src -> evaluate(bundle, $this.entry.resource.where($this.is(Patient))) as patient then ExtractObservations(src, bundle, patient), ExtractRiskAssessmentObservation(src, bundle, bundle, patient) "rule_d";
    } "rule_e";
}

group ExtractPatient(source src : QuestionnaireResponse, target patient : Patient) {
    src -> patient.id = uuid() "rule_patient_id_generation";
	src.item as patientBarcodeItem where(linkId = 'patient-barcode' and answer.count() > 0 and answer.empty().not()) then {
          src -> patient.id = create('id') as patientId then {
            src -> patientId.value = evaluate(patientBarcodeItem, $this.answer.value) "rule_j1_1";
          } "rule_j1_2";
    };

    src.item as item where(linkId = 'PR') then {
       item.item as inner_item where (linkId = 'patient-0-birth-date') then {
           inner_item.answer first as ans then {
               ans.value as val -> patient.birthDate = val "rule_a";
           };
       };

       item.item as nameItem where(linkId = 'PR-name') -> patient.name = create('HumanName') as patientName then {
          src -> patientName.family = evaluate(nameItem, $this.item.where(linkId = 'PR-name-family').answer.value) "rule_d";
          src -> patientName.given = evaluate(nameItem, $this.item.where(linkId = 'PR-name-given').answer.value) "rule_e";
       };

       src -> patient.gender = evaluate(item, $this.item.where(linkId = 'patient-0-gender').answer.value.code) "rule_f";
       item.item as telecomBlock where (linkId = 'PR-telecom') -> patient.telecom = create('ContactPoint') as patientContact then {
          src -> patientContact.value = evaluate(telecomBlock, $this.item.where(linkId = 'PR-telecom-value').answer.value) "rule_f1";
          src -> patientContact.system = "phone" "rule_f2";
          src -> patientContact.rank = create('positiveInt') as posInt then {
            src -> posInt.value = "1" "rule_f5";
          } "rule_f3";
       } "rule_f4";
       src -> patient.active = evaluate(item, $this.item.where(linkId = 'PR-active').answer.value) "rule_h";
       item.item as addressBlock where (linkId = 'PR-address') -> patient.address = create('Address') as patientAddress then {
          src -> patientAddress.city = evaluate(addressBlock, $this.item.where(linkId = 'PR-address-city').answer.value) "rule_g1";
          src -> patientAddress.country = evaluate(addressBlock, $this.item.where(linkId = 'PR-address-country').answer.value) "rule_g2";
          src -> patientAddress.use = "home" "rule_g3";
          src -> patientAddress.type = "physical" "rule_g4";
       } "rule_g";
    };
}

group ExtractRelatedPerson(source src : QuestionnaireResponse, target bundle : Bundle, source patient : Patient) {
    src -> bundle.entry as entry, entry.resource = create('RelatedPerson') as relatedPerson then {
        src.item as item where(linkId = 'RP') then {
            src -> relatedPerson.name = create('HumanName') as relatedPersonName then {
                src -> relatedPersonName.family = evaluate(item, $this.item.where(linkId = 'RP-family-name').answer.value) "rule_erp_2";
                src -> relatedPersonName.given = evaluate(item, $this.item.where(linkId = 'RP-first-name').answer.value) "rule_erp_3";
            } "rule_erp_1";
            item.item as patientRelationship where(linkId = 'RP-relationship' and answer.count() > 0 and answer[0].empty().not()) then {
                  src -> evaluate(patientRelationship, $this.answer.value) as relationshipString then {
                      src -> relatedPerson.relationship = cc("http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype", relationshipString) "rule_erp_4a";
                  } "rule_erp_4";
            } "rule_erp_4__3";
            src -> relatedPerson.telecom = create('ContactPoint') as relatedPersonContact then {
                src -> relatedPersonContact.system = "phone" "rule_erp_5";
                src -> relatedPersonContact.value = evaluate(item, $this.item.where(linkId = 'RP-contact-1').answer.value) "rule_erp_6";
                src -> relatedPersonContact.rank = create('positiveInt') as posInt then {
                    src -> posInt.value = "1" "rule_erp_7a";
                } "rule_erp_7";
            } "rule_erp_7b";

            src -> relatedPerson.telecom = create('ContactPoint') as relatedPersonContact then {
                src -> relatedPersonContact.system = "phone" "rule_erp_8";
                src -> relatedPersonContact.value = evaluate(item, $this.item.where(linkId = 'RP-contact-alternate').answer.value) "rule_erp_9";
                src -> relatedPersonContact.rank = create('positiveInt') as posInt then {
                  src -> posInt.value = "2" "rule_erp_10b";
                } "rule_erp_10";
            } "rule_erp_10a";

            src -> relatedPerson.id = uuid() "rule_erp_11_a";
            src.item as relatedPersonIdItem where(linkId = 'RP-id' and answer.count() > 0 and answer.empty().not()) then {
                src -> relatedPerson.id = create('id') as patientId then {
                  src -> patientId.value = evaluate(relatedPersonIdItem, $this.answer.value) "rule_erp_11_1_1";
                } "rule_erp_11_1";
            } "rule_erp_11";

            patient -> relatedPerson.patient = reference(patient) "rule_erp_13a";
        };
    } "rule_erp_14";
}

group ExtractObservations(source src : QuestionnaireResponse, target bundle : Bundle, source patient : Patient) {
    src.item as item where(linkId = 'comorbidities') then {
    	item.answer as itemAns -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
	    	src -> obs.id = uuid() "rule_eo1";
	    	src -> obs.effective = evaluate(patient, now()) "rule_eo2";
	    	src -> obs.subject = reference(patient) "rule_eo3";
	    	src -> obs.code = cc("https://www.snomed.org", "991381000000107") "rule_eo4";
	    	src -> obs.status = "final" "rule_eo5";
	    	itemAns.value as itemValue -> obs.value = create('CodeableConcept') as codeableConcept then {
              itemValue.display as itemValueText -> codeableConcept.text = itemValueText "rule_eo6_1";
              itemValue -> codeableConcept.coding = itemValue "rule_eo6_2";

              itemValue where(itemValue.code = '74964007') -> bundle.entry as entry, entry.resource = create('Observation') as obs2 then {
                src.item as otherComorbItem where(linkId = 'other_comorbidities' and answer.count() > 0 and answer[0].empty().not()) then {
                  src -> obs2.id = uuid() "rule_eo6_3_1_1";
                  src -> obs2.effective = evaluate(patient, now()) "rule_eo6_3_1_2";
                  src -> obs2.subject = reference(patient) "rule_eo6_3_1_3";
                  src -> obs2.code = cc("https://www.snomed.org", "38651000000103") "rule_eo6_3_1_4";
                  src -> obs2.status = "final" "rule_eo6_3_1_5";
                  src -> obs2.value = evaluate(otherComorbItem , $this.answer[0].value) "rule_eo6_3_1_5";
                } "rule_eo6_3_1";
              } "rule_eo6_3";
            } "rule_eo6";
    	} "rule_e08";
	} "rule_eo7";
}


group ExtractRiskAssessmentObservation(source src : QuestionnaireResponse, source bundleEn : Bundle, target bundle : Bundle, source patient : Patient) {
    src.item as item where(linkId = 'comorbidities' and answer.count() > 0) -> bundle.entry as entry, entry.resource = create('RiskAssessment') as riskAm then {
        src -> riskAm.id = uuid() "rule_erao_1";
        src -> riskAm.code = create('CodeableConcept') as riskAmCc then {
          src -> riskAmCc.text = "Client is at risk for serious illness from COVID-19" "rule_erao_2_1";
          src -> riskAmCc.coding = c("https://www.snomed.org", "225338004", "Risk Assessment") "rule_erao_2_2";
        } "rule_erao_2";
        src -> riskAm.status = "final" "rule_erao_3";
        src -> riskAm.subject = reference(patient) "rule_erao_4";
        src -> riskAm.occurrence = evaluate(patient, now()) "rule_erao_5";
        src -> riskAm.prediction = create('RiskAssessment_Prediction') as riskPrediction then {
          src -> riskPrediction.relativeRisk = evaluate(bundle, $this.entry.where(resource.is(Observation) and resource.code.coding[0].code = '991381000000107').count()) "rule_erao_6_1";
          src -> riskPrediction.outcome = cc("https://www.snomed.org", "38651000000103") "rule_erao_6_2";
        } "rule_erao_6";
        bundleEn.entry as resourceEntry where(resource.is(Observation) and resource.code.coding[0].code = '991381000000107') then {
          resourceEntry.resource as rs -> riskAm.basis = reference(rs) "rule_erao_7_1";
        } "rule_erao_7";

        src -> bundle.entry as entry, entry.resource = create('Flag') as riskFlag then {
          src -> riskFlag.id = uuid() "rule_erao_8_1";
          src -> riskFlag.status = "active" "rule_erao_8_2";
          src -> riskFlag.subject = reference(patient) "rule_erao_8_3";
          src -> riskFlag.code = create('CodeableConcept') as riskFlagCc then {
            src -> riskFlagCc.text = "Client is at risk for serious illness from COVID-19" "rule_erao_8_4_1";
            src -> riskFlagCc.coding = c("https://www.snomed.org", "225338004", "Risk Assessment") "rule_erao_8_4_2";
          } "rule_erao_8_4";
          src -> riskFlag.extension = create('Extension') as flagDetailExt then {
            src -> flagDetailExt.url = "http://hl7.org/fhir/StructureDefinition/flag-detail" "rule_erao_8_5_1";
            src -> flagDetailExt.value = reference(riskAm) "rule_erao_8_5_2";
          } "rule_erao_8_5";
        } "rule_erao_8";
    } "rule_erao_9";
}