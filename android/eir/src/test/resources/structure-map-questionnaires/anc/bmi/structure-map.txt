map "http://fhir.labs.smartregister.org/fhir/StructureMap/12060" = '12060'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Encounter" as target
uses "http://hl7.org/fhir/StructureDefinition/positiveInt" as target
uses "http://hl7.org/fhir/StructureDefinition/Quantity" as target
uses "http://hl7.org/fhir/StructureDefinition/Quantity" as target

group BmiExtraction(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.id = uuid() "rule_a";
    src -> bundle.type = 'collection' "rule_b";
    src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {
        src -> encounter.id then ExtractEncounter(src, encounter) "rule_c1";
        src -> create ('Quantity') as weightQty, create ('Quantity') as heightQty then {
         src -> encounter then ExtractWeightMetric(src, bundle, encounter, weightQty) "rule_c2_1";
         src -> encounter then ExtractHeightMetric(src, bundle, encounter, heightQty) "rule_c2_2";
        } "rule_c2";

        src -> create ('Quantity') as weightQty, create ('Quantity') as heightQty then {
         src -> encounter then ExtractWeightStandard(src, bundle, encounter) "rule_c3_1";
         src -> encounter then ExtractHeightStandard(src, bundle, encounter) "rule_c3_2";
        } "rule_c3";

        src -> encounter then ExtractBmi(src, bundle, encounter) "rule_c4";
    } "rule_c";
}

group ExtractEncounter(source src : QuestionnaireResponse, target encounter : Encounter) {
    src -> encounter.id = uuid() "rule_ee_1";
    src -> encounter.status = "finished" "rule_ee_2";
    src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "AMB", "ambulatory") "rule_ee_3";
    src -> encounter.serviceType = cc("http://terminology.hl7.org/CodeSystem/service-type", "124", "General Practice") "rule_ee_4";
    src -> encounter.type = cc("http://snomed.info/sct", "11429006", "Consultation") "rule_ee_5";
    src -> encounter.subject = create('Reference') as reference then {
           src -> reference.reference = evaluate(src, 'Patient/' + $this.item.where(linkId = 'patient-id').answer.value) "rule_ee_6_1";
         } "rule_ee_6";
    src -> encounter.reasonCode = create('CodeableConcept') as codeableConcept then {
        src -> codeableConcept.text = "BMI Check" "rule_ee_7_1";
    } "rule_ee_7";
}

group ExtractWeightMetric(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter, target qty: Quantity) {
    src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'metric') then {
            src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
                src -> obs.id = uuid() "ew_3";
                src -> obs.code = create('CodeableConcept') as codeableConcept then {
                    src -> codeableConcept.coding = c("http://loinc.org", "29463-7", "Body Weight") "ew_4";
                    src -> codeableConcept.coding = c("http://loinc.org", "3141-9", "Body weight Measured") "ew_4.1";
                    src -> codeableConcept.coding = c("http://snomed.info/sct", "27113001", "Body weight") "ew_4.2";
                    src -> codeableConcept.coding = c("http://acme.org/devices/clinical-codes", "body-weight", "Body Weight") "ew_4.3";
                } "ew_4_";
                src.item as dataDetailsItem where (linkId = 'data details') then {
                           src -> qty.value = evaluate(dataDetailsItem, $this.item.where(linkId = 'vital-signs-body-wight_kg').answer.value) "rule_ei_12_1";
                           src -> qty.system = "http://unitsofmeasure.org" "rule_ei_12_2";
                           src -> qty.code = "kg" "rule_ei_12_3";
                           src -> qty.unit = "kg" "rule_ei_12_4";
                           src -> obs.value = qty "rule_ei_12";
                } "rule_ei_12-1";
                src -> obs.subject = create('Reference') as reference then {
                        src -> reference.reference = evaluate(src, 'Patient/' + $this.item.where(linkId = 'patient-id').answer.value) "rule_ei_6_1";
                      } "rule_ei_6";
                src -> obs.encounter = reference(encounter) "ew_5";
                src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", 'vital-signs', "Vital Signs") "eh_6";
                src -> obs.effective = evaluate(item, now()) "ew_7";
            } "ew_2";
        } "ew_1";
}

group ExtractHeightMetric(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter, target qty: Quantity) {
    src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'metric') then {
            src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
                src -> obs.id = uuid() "eh_3";
                src -> obs.code = create('CodeableConcept') as codeableConcept then {
                 src -> codeableConcept.coding = c("http://loinc.org", "3137-7", "Body height") "eh_4.2";
                 src -> codeableConcept.coding = c("http://loinc.org", "8302-2") "eh_4.1";
                } "eh_4";
                src.item as dataDetailsItem where (linkId = 'data details') then {
                    src -> obs.value = create("Quantity") as qty then {
                           src -> qty.value = evaluate(dataDetailsItem, $this.item.where(linkId = 'vital-signs-height_cm').answer.value) "rule_ei_12_1";
                           src -> qty.system = "http://unitsofmeasure.org" "rule_ei_12_2";
                           src -> qty.code = "cm" "rule_ei_12_3";
                           src -> qty.unit = "cm" "rule_ei_12_4";
                           src -> obs.value = qty "rule_ei_12";
                         } "rule_ei_12";
                } "rule_ei_12-1";
                src -> obs.encounter = reference(encounter) "eh_5";
                src -> obs.subject = create('Reference') as reference then {
                       src -> reference.reference = evaluate(src, 'Patient/' + $this.item.where(linkId = 'patient-id').answer.value) "rule_ei_6_1";
                       } "rule_ei_6";
                src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", 'vital-signs', "Vital Signs") "eh_6";
                src -> obs.effective = evaluate(item, now()) "eh_7";
            } "eh_2";
        } "eh_1";
}


group ExtractWeightStandard(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'standard') then {
            src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
                src -> obs.id = uuid() "ew_3";
                src -> obs.code = create('CodeableConcept') as codeableConcept then {
                    src -> codeableConcept.coding = c("http://loinc.org", "29463-7", "Body Weight") "ew_4";
                    src -> codeableConcept.coding = c("http://loinc.org", "3141-9", "Body weight Measured") "ew_4.1";
                    src -> codeableConcept.coding = c("http://snomed.info/sct", "27113001", "Body weight") "ew_4.2";
                    src -> codeableConcept.coding = c("http://acme.org/devices/clinical-codes", "body-weight", "Body Weight") "ew_4.3";
                } "ew_4_";
                src.item as dataDetailsItem where (linkId = 'data details') then {
                    src -> obs.value = create("Quantity") as qty then {
                           src -> qty.value = evaluate(dataDetailsItem, $this.item.where(linkId = 'vital-signs-body-wight_lb').answer.value) "rule_ei_12_1";
                           src -> qty.system = "http://unitsofmeasure.org" "rule_ei_12_2";
                           src -> qty.code = "[lb_av]" "rule_ei_12_3";
                           src -> qty.unit = "lb" "rule_ei_12_4";
                         } "rule_ei_12";
                } "rule_ei_12-1";
                src -> obs.encounter = reference(encounter) "ew_5";
                src -> obs.subject = create('Reference') as reference then {
                       src -> reference.reference = evaluate(src, 'Patient/' + $this.item.where(linkId = 'patient-id').answer.value) "rule_ei_6_1";
                       } "rule_ei_6";
                src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", 'vital-signs', "Vital Signs") "eh_6";
                src -> obs.effective = evaluate(item, now()) "ew_7";
            } "ew_2";
        } "ew_1";
}

group ExtractHeightStandard(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'standard') then {
            src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
                src -> obs.id = uuid() "eh_3";
                src -> obs.code = create('CodeableConcept') as codeableConcept then {
                 src -> codeableConcept.coding = c("http://loinc.org", "3137-7", "Body height") "eh_4.2";
                 src -> codeableConcept.coding = c("http://loinc.org", "8302-2") "eh_4.1";
                } "eh_4";
                src.item as dataDetailsItem where (linkId = 'data details') then {
                    src -> obs.value = create("Quantity") as qty then {
                           src -> qty.value = evaluate(dataDetailsItem, ($this.item.where(linkId = 'vital-signs-height_ft').answer.value * 12 ) + $this.item.where(linkId = 'vital-signs-height_in').answer.value) "rule_ei_12_1";
                           src -> qty.system = "http://unitsofmeasure.org" "rule_ei_12_2";
                           src -> qty.code = "[in_i]" "rule_ei_12_3";
                           src -> qty.unit = "in" "rule_ei_12_4";
                         } "rule_ei_12";
                } "rule_ei_12-1";
                src -> obs.encounter = reference(encounter) "eh_5";
                src -> obs.subject = create('Reference') as reference then {
                       src -> reference.reference = evaluate(src, 'Patient/' + $this.item.where(linkId = 'patient-id').answer.value) "rule_ei_6_1";
                       } "rule_ei_6";
                src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", 'vital-signs', "Vital Signs") "eh_6";
                src -> obs.effective = evaluate(item, now()) "eh_7";
            } "eh_2";
        } "eh_1";
}

group ExtractBmi(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter) {
    src -> create('Quantity') as heightQty, create('Quantity') as weightQty then {
        src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'metric') then {
            src -> heightQty.value = evaluate(bundle, $this.entry[2].resource.value.value/100) "eos1_1_1";
            src -> heightQty.value = evaluate(bundle, heightQty.value * heightQty.value) "eos1_1_1";
        } "eos1_1";

        src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'standard') then {
            src -> heightQty.value = evaluate(bundle, $this.entry[2].resource.value.value * 0.0254) "eos1_2_1";
            src -> heightQty.value = evaluate(heightQty, $this.value * $this.value) "eos1_2_2";
        } "eos1_2";

        src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'metric') then {
            src -> weightQty.value = evaluate(bundle, $this.entry[1].resource.value.value) "eos1_3_1";
        } "eos1_3";

        src.item as item where(linkId = 'select-mode' and answer.count() > 0 and (answer[0].value.code.value) = 'standard') then {
            src -> weightQty.value = evaluate(bundle, $this.entry[1].resource.value.value/2.2046) "eos1_4_1";
        } "eos1_4";

        src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
            src -> obs.id = uuid() "eos_3";
            src -> obs.code = create('CodeableConcept') as codeableConcept then {
                src -> codeableConcept.coding = c("http://loinc.org", "39156-5", "Body mass index (BMI) [Ratio]") "eos_4";
                src -> codeableConcept.text = "BMI" "eos_5";
            } "eos_4_";
            src -> obs.value = create("Quantity") as qty then {
                   src -> qty.value = evaluate(src, weightQty.value/heightQty.value) "rule_ei_12_1";
                   src -> qty.system = "http://unitsofmeasure.org" "rule_ei_12_2";
                   src -> qty.code = "kg/m2" "rule_ei_12_3";
                   src -> qty.unit = "kg/m2" "rule_ei_12_3";
                 } "rule_ei_12";
            src -> obs.encounter = reference(encounter) "eos_5";
            src -> obs.subject = create('Reference') as reference then {
                src -> reference.reference = evaluate(src, 'Patient/' + $this.item.where(linkId = 'patient-id').answer.value) "rule_ei_6_1";
            } "rule_ei_6";
            src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", 'vital-signs', "Vital Signs") "eos_6";
            src -> obs.effective = evaluate(src, now()) "eos_7";
            src -> obs.derivedFrom = create('Reference') as reference then {
                src -> reference.reference = evaluate(bundle, 'Observation/' + $this.entry[1].resource.id) "eos_8_1";
                src -> reference.display = "Body Weight" "eos_8_2";
            } "eos_8";
            src -> obs.derivedFrom = create('Reference') as reference then {
                src -> reference.reference = evaluate(bundle, 'Observation/' + $this.entry[2].resource.id) "eos_9_1";
                src -> reference.display = "Body Height" "eos_9_2";
            } "eos_9";
        } "eos_2";
    } "eos_1";
}