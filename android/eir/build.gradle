apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka'
apply plugin: "org.jetbrains.kotlin.plugin.serialization"
apply from: "code.coverage.gradle"

Properties props = new Properties()

def arr = ["FHIR_BASE_URL", "OAUTH_BASE_URL", "OAUTH_CIENT_ID", "OAUTH_CLIENT_SECRET", "OAUTH_SCOPE"]
if (rootProject.file("local.properties").exists()) {
    props.load(rootProject.file("local.properties").newDataInputStream())

    arr.each { prop ->
        project.ext.set(prop, props.getProperty(prop, (prop == "FHIR_BASE_URL") ? "https://sample.url/fhir/" : "sample"))
    }
} else {
    println("local.properties does not exist. The following values are required " + arr.join(", "))
    arr.each { prop ->
        project.ext.set(prop, props.getProperty(prop, (prop.contains("URL")) ? "https://sample.url/fhir/" : "sample_" + prop))
    }
}

android {

    compileSdkVersion sdk_versions.compile_sdk
    dataBinding {
        enabled true
    }
    defaultConfig {
        applicationId "org.smartregister.fhircore.eir"
        minSdkVersion sdk_versions.min_sdk
        targetSdkVersion sdk_versions.target_sdk
        versionCode 1
        versionName "0.0.7"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Required when setting minSdkVersion to 20 or lower
        // See https://developer.android.com/studio/write/java8-support
        multiDexEnabled true

        buildConfigField("boolean", 'SKIP_AUTH_CHECK', "false")

        buildConfigField("String", 'FHIR_BASE_URL', "\"${FHIR_BASE_URL}\"")
        buildConfigField("String", 'OAUTH_BASE_URL', "\"${OAUTH_BASE_URL}\"")
        buildConfigField("String", 'OAUTH_CIENT_ID', "\"${OAUTH_CIENT_ID}\"")
        buildConfigField("String", 'OAUTH_CLIENT_SECRET', "\"${OAUTH_CLIENT_SECRET}\"")
        buildConfigField("String", 'OAUTH_SCOPE', "\"${OAUTH_SCOPE}\"")
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        // See https://developer.android.com/studio/write/java8-support
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        // See https://developer.android.com/studio/write/java8-support
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
    }
    // See https://developer.android.com/studio/write/java8-support
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/*'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.0.1'
    }
}

configurations {
    all {
        exclude module: 'json'
        exclude module: 'xpp3'
    }
}

dependencies {
    implementation(project(":engine"))
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    coreLibraryDesugaring deps.desugar
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.espresso
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'

    implementation deps.appcompat
    implementation deps.constraint_layout
    implementation deps.kotlin.stdlib
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.livedata_ktx
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel
    implementation deps.material
    implementation deps.recyclerview
    implementation deps.work.runtime

    implementation deps.core
    implementation deps.fragment

    implementation(deps.cql_engine.fhir) {
        transitive = false
    }
    implementation(deps.caffeine) {
        transitive = false
    }
    implementation(deps.guava) {
        transitive = false
    }
    implementation(deps.room.ktx) {
        transitive = false
    }
    implementation(deps.room.runtime) {
        transitive = false
    }
    implementation(deps.json_tools.json_patch) {
        transitive = false
    }

    api(deps.cql_engine.core) {
        transitive = false
    }
    api(deps.hapi_r4) {
        transitive = false
    }

    kapt deps.room.compiler

    testImplementation deps.junit5_api
    testRuntimeOnly deps.junit5_engine
    testRuntimeOnly deps.junit5_engine_vintage
    testImplementation deps.robolectric
    testImplementation deps.atsl.ext_junit
    testImplementation deps.atsl.ext_junit_ktx
    testImplementation deps.coroutines.test
    testImplementation deps.androidx.core_test
    debugImplementation deps.fragment_testing
    releaseImplementation deps.fragment_testing
    testImplementation deps.mockk

    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.espresso
}

dokkaHtml.configure {
    outputDirectory.set(file("$rootDir/docs"))
    dokkaSourceSets {
        named("main") {
            moduleName.set("OpenSRP FHIR Core Documentation")
            jdkVersion.set(8)
            noAndroidSdkLink.set(false)
            perPackageOption {
                prefix = matching(".*\\.internal.*")
                suppress = true
            }
            suppressGeneratedFiles.set(true)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
        }

        pluginsMapConfiguration.set(
                ["org.jetbrains.dokka.base.DokkaBase": """{
                "footerMessage": "Â© ${Year.now().value} Copyright Ona"
                }"""]
        )
    }
}
