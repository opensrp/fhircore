"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[2992],{4631:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=r(4848),t=r(8453);const a={title:"Unique ID assignment"},s=void 0,o={id:"engineering/app/configuring/forms/unique-ids",title:"Unique ID assignment",description:"Unique IDs are unique identifier values assigned to a resource (e.g. Patient) and are associated with a single entity.",source:"@site/docs/engineering/app/configuring/forms/unique-ids.mdx",sourceDirName:"engineering/app/configuring/forms",slug:"/engineering/app/configuring/forms/unique-ids",permalink:"/engineering/app/configuring/forms/unique-ids",draft:!1,unlisted:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/engineering/app/configuring/forms/unique-ids.mdx",tags:[],version:"current",frontMatter:{title:"Unique ID assignment"},sidebar:"defaultSidebar",previous:{title:"Save form as draft",permalink:"/engineering/app/configuring/forms/save-form-as-draft"},next:{title:"Validation",permalink:"/engineering/app/configuring/forms/validation"}},d={},c=[{value:"Characteristic-based Group resource for unique IDs",id:"characteristic-based-group-resource-for-unique-ids",level:2},{value:"Sample Group resource with unique IDs",id:"sample-group-resource-with-unique-ids",level:2},{value:"Verhoeff algorithm for ID generation",id:"verhoeff-algorithm-for-id-generation",level:2},{value:"Verhoeff algorithm overview",id:"verhoeff-algorithm-overview",level:3},{value:"Verhoeff algorithm tables",id:"verhoeff-algorithm-tables",level:3},{value:"Generate checksum",id:"generate-checksum",level:3},{value:"Validate an ID",id:"validate-an-id",level:3},{value:"Usage in an Android App",id:"usage-in-an-android-app",level:3},{value:"Syncing or storing IDs",id:"syncing-or-storing-ids",level:3}];function l(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Unique IDs are unique identifier values assigned to a resource (e.g. Patient) and are associated with a single entity."}),"\n",(0,i.jsx)(n.p,{children:"Unique ID assignment configs determine how pre-generated unique IDs are retrieved from a Group FHIR resource and subsequently populated in a Questionnaire field."}),"\n",(0,i.jsx)(n.p,{children:"Here is a sample configuration for the unique identifier assignment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "uniqueIdAssignment": {\n    "linkId": "phn",\n    "idFhirPathExpression": "Group.characteristic.where(exclude=false and code.text=\'phn\').first().value.text",\n    "readOnly": false,\n    "resource": "Group",\n    "sortConfigs": [\n      {\n        "paramName": "_lastUpdated",\n        "dataType": "DATE",\n        "order": "DESCENDING"\n      }\n    ],\n    "resourceFilterExpression": {\n      "conditionalFhirPathExpressions": [\n        "Group.active = true and Group.type = \'device\' and Group.name = \'Unique IDs\'"\n      ],\n      "matchAll": true\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The configuration contains the following properties:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"linkId"})," - The linkId for the targeted Questionnaire item\n",(0,i.jsx)(n.strong,{children:"idFhirPathExpression"})," - The FHIR path expression used to extract ID from a resource\n",(0,i.jsx)(n.strong,{children:"readOnly"})," - Enable or disable editing of the field. Defaults to ",(0,i.jsx)(n.code,{children:"true"}),"\n",(0,i.jsx)(n.strong,{children:"resource"})," - FHIR resource used to store generated unique IDs\n",(0,i.jsx)(n.strong,{children:"sortConfigs"})," - For ordering resources. It is important to ensure the resources are ordered by last updated\n",(0,i.jsx)(n.strong,{children:"resourceFilterExpression"})," - Extra configurations to apply filter via code on the declared Resource"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"NOTE:"})," If the ",(0,i.jsx)(n.code,{children:"readOnly"})," configuration is set to false, the ID field in the Questionnaire becomes editable. If the prepopulated ID\nis modified and a different ID is submitted with the Questionnaire, the prepopulated ID will not be marked as used.\nThis means that it will still be prepopulated the next time the Questionnaire is launched."]}),"\n",(0,i.jsx)(n.h2,{id:"characteristic-based-group-resource-for-unique-ids",children:"Characteristic-based Group resource for unique IDs"}),"\n",(0,i.jsxs)(n.p,{children:["IDs are stored as ",(0,i.jsx)(n.code,{children:"text"})," in a ",(0,i.jsx)(n.code,{children:"valueCodeableConcept"})," in the ",(0,i.jsx)(n.code,{children:"characteristic"})," field.\nThe batch of IDs is assigned to a Practitioner using the ",(0,i.jsx)(n.code,{children:"managingEntity"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When an ID is used, the characteristic entry with that ID is updated to be excluded by setting ",(0,i.jsx)(n.code,{children:'"exclude": true'}),". Once all IDs in the Group are used, the group is set to inactive."]}),"\n",(0,i.jsx)(n.h2,{id:"sample-group-resource-with-unique-ids",children:"Sample Group resource with unique IDs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Group",\n  "id": "37312ad4-538e-4535-82d2-ea14f40deeb9",\n  "meta": {\n    "versionId": "9",\n    "lastUpdated": "2023-12-22T06:43:35.986+00:00",\n    "source": "#04a1c85fb6adf0cc",\n    "tag": [\n      {\n        "system": "https://smartregister.org/care-team-tag-id",\n        "code": "3e005baf-854b-40a7-bdd5-9b73f63aa9a3",\n        "display": "Practitioner CareTeam"\n      },\n      {\n        "system": "https://smartregister.org/organisation-tag-id",\n        "code": "41eae946-bdc4-4179-b404-6503ff12f59c",\n        "display": "Practitioner Organization"\n      },\n      {\n        "system": "https://smartregister.org/location-tag-id",\n        "code": "3816",\n        "display": "Practitioner Location"\n      },\n      {\n        "system": "https://smartregister.org/practitioner-tag-id",\n        "code": "49b72a3d-44cd-4a74-9459-4dc9f6b543fa",\n        "display": "Practitioner"\n      },\n      {\n        "system": "https://smartregister.org/app-version",\n        "code": "Not defined",\n        "display": "Application Version"\n      }\n    ]\n  },\n  "identifier": [\n    {\n      "system": "http://smartregister.org",\n      "value": "37312ad4-538e-4535-82d2-ea14f40deeb9"\n    }\n  ],\n  "active": true,\n  "type": "device",\n  "actual": true,\n  "name": "Unique IDs",\n  "managingEntity": {\n    "reference": "Practitioner/49b72a3d-44cd-4a74-9459-4dc9f6b543fa"\n  },\n  "characteristic": [\n    {\n      "code": {\n        "text": "phn"\n      },\n      "valueCodeableConcept": {\n        "text": "1000010001"\n      },\n      "exclude": false\n    },\n    {\n      "code": {\n        "text": "phn"\n      },\n      "valueCodeableConcept": {\n        "text": "1000020002"\n      },\n      "exclude": false\n    },\n    {\n      "code": {\n        "text": "phn"\n      },\n      "valueCodeableConcept": {\n        "text": "1000030003"\n      },\n      "exclude": false\n    },\n    {\n      "code": {\n        "text": "phn"\n      },\n      "valueCodeableConcept": {\n        "text": "1000040004"\n      },\n      "exclude": false\n    },\n    {\n      "code": {\n        "text": "phn"\n      },\n      "valueCodeableConcept": {\n        "text": "1000050005"\n      },\n      "exclude": false\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"verhoeff-algorithm-for-id-generation",children:"Verhoeff algorithm for ID generation"}),"\n",(0,i.jsx)(n.p,{children:"To use the Verhoeff algorithm for ID generation on Android, you will need to implement the algorithm for checksum validation. The Verhoeff algorithm ensures that the IDs generated are error-resistant, specifically detecting common errors like transpositions or single-digit mistakes. Here is how you can implement it in Android."}),"\n",(0,i.jsx)(n.p,{children:"Step-by-Step Guide:"}),"\n",(0,i.jsx)(n.h3,{id:"verhoeff-algorithm-overview",children:"Verhoeff algorithm overview"}),"\n",(0,i.jsx)(n.p,{children:"The Verhoeff algorithm uses:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A multiplication table (d table) to determine how numbers are multiplied."}),"\n",(0,i.jsx)(n.li,{children:"A permutation table (p table) to rearrange digits before adding them."}),"\n",(0,i.jsx)(n.li,{children:"An inverse table (inv table) to compute the check digit."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"verhoeff-algorithm-tables",children:"Verhoeff algorithm tables"}),"\n",(0,i.jsx)(n.p,{children:"Here are the tables used in the algorithm:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"object Verhoeff {\n    // D table for multiplication\n    private val d = arrayOf(\n        intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n        intArrayOf(1, 2, 3, 4, 0, 6, 7, 8, 9, 5),\n        intArrayOf(2, 3, 4, 0, 1, 7, 8, 9, 5, 6),\n        intArrayOf(3, 4, 0, 1, 2, 8, 9, 5, 6, 7),\n        intArrayOf(4, 0, 1, 2, 3, 9, 5, 6, 7, 8),\n        intArrayOf(5, 9, 8, 7, 6, 0, 4, 3, 2, 1),\n        intArrayOf(6, 5, 9, 8, 7, 1, 0, 4, 3, 2),\n        intArrayOf(7, 6, 5, 9, 8, 2, 1, 0, 4, 3),\n        intArrayOf(8, 7, 6, 5, 9, 3, 2, 1, 0, 4),\n        intArrayOf(9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n    )\n\n    // P table for permutation\n    private val p = arrayOf(\n        intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n        intArrayOf(1, 5, 7, 6, 2, 8, 3, 0, 9, 4),\n        intArrayOf(5, 8, 0, 3, 7, 9, 6, 1, 4, 2),\n        intArrayOf(8, 9, 1, 6, 0, 4, 3, 5, 2, 7),\n        intArrayOf(9, 4, 5, 3, 1, 2, 6, 8, 7, 0),\n        intArrayOf(4, 2, 8, 6, 5, 7, 3, 9, 0, 1),\n        intArrayOf(2, 7, 9, 3, 8, 0, 6, 4, 1, 5),\n        intArrayOf(7, 0, 4, 6, 9, 1, 3, 2, 5, 8)\n    )\n\n    // Inv table for inverse\n    private val inv = intArrayOf(0, 4, 3, 2, 1, 5, 6, 7, 8, 9)\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"generate-checksum",children:"Generate checksum"}),"\n",(0,i.jsx)(n.p,{children:"Here is the code to compute the Verhoeff check digit for a given number:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"// Function to generate Verhoeff Checksum\nfun generateVerhoeff(number: String): String {\n    var c = 0 // Checksum\n    val myArray = stringToReversedIntArray(number)\n    \n    for (i in myArray.indices) {\n        c = Verhoeff.d[c][Verhoeff.p[i % 8][myArray[i]]]\n    }\n    \n    return Verhoeff.inv[c].toString() // Return Verhoeff check digit\n}\n\n// Convert string to reversed int array\nprivate fun stringToReversedIntArray(num: String): IntArray {\n    val myArray = num.map { it.toString().toInt() }.toIntArray()\n    return myArray.reversedArray()\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validate-an-id",children:"Validate an ID"}),"\n",(0,i.jsx)(n.p,{children:"To validate an ID with its check digit, you need to verify that the check digit is correct. Here\u2019s the code for validation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"// Function to validate Verhoeff check digit\nfun validateVerhoeff(number: String): Boolean {\n    var c = 0\n    val myArray = stringToReversedIntArray(number)\n    \n    for (i in myArray.indices) {\n        c = Verhoeff.d[c][Verhoeff.p[i % 8][myArray[i]]]\n    }\n    \n    return c == 0 // If the checksum is 0, the number is valid\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"usage-in-an-android-app",children:"Usage in an Android App"}),"\n",(0,i.jsx)(n.p,{children:"You can integrate the above code into an Android project. Here\u2019s how to use it for generating a patient ID and checking its validity:"}),"\n",(0,i.jsx)(n.p,{children:"To generate a patient ID with a Verhoeff check digit:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val baseID = "123456"  // Example patient ID (without checksum)\nval checkDigit = generateVerhoeff(baseID)\nval fullID = baseID + checkDigit  // Full ID with Verhoeff check digit\nprintln("Generated Patient ID: $fullID")\n\n\n\t\u2022\tTo validate a patient ID:\nval isValid = validateVerhoeff(fullID)\nif (isValid) {\n    println("The ID is valid.")\n} else {\n    println("The ID is invalid.")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"syncing-or-storing-ids",children:"Syncing or storing IDs"}),"\n",(0,i.jsx)(n.p,{children:"Once you have generated the ID, you can store it in a local database (e.g., Room or SQLite) or sync it with a server. You can implement these features based on your app\u2019s design, whether you are using server communication (REST API) or local storage."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(6540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);