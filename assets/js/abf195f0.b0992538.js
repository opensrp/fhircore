"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[2497],{1190:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=t(4848),i=t(8453);const o={},r="Unit tests",c={id:"engineering/testing/unit-tests",title:"Unit tests",description:"Naming Conventions",source:"@site/docs/engineering/testing/unit-tests.mdx",sourceDirName:"engineering/testing",slug:"/engineering/testing/unit-tests",permalink:"/engineering/testing/unit-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/engineering/testing/unit-tests.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Performance tests",permalink:"/engineering/testing/performance-tests"},next:{title:"Design",permalink:"/design/introduction"}},l={},d=[{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"Spotless",id:"spotless",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unit-tests",children:"Unit tests"})}),"\n",(0,s.jsx)(n.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,s.jsx)(n.p,{children:"We follow the following naming convention for our test cases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<methodName><ConditionUnderTest><ExpectedBehavior>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example:"})," for a sample method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun isNumberEven(value:Int):Bool{\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sample test case:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"isNumberEvenWithParameterFiveShouldReturnFalse\n"})}),"\n",(0,s.jsx)(n.h2,{id:"spotless",children:"Spotless"}),"\n",(0,s.jsx)(n.p,{children:"We use Spotless to maintain the Java/Kotlin coding style in the codebase. Run the following command to check the codebase:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./gradlew spotlessCheck\n"})}),"\n",(0,s.jsx)(n.p,{children:"and run the following command to apply fixes to the violations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./gradlew spotlessApply\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);